// This file has been autogenerated from parsing an Objective-C header file added in Xcode.

using System;
using System.Linq;
using System.Net;
using System.Collections.Generic;
using CoreGraphics;
using System.IO;

using Foundation;
using UIKit;

using NetworkCommsDotNet;
using NetworkCommsDotNet.DPSBase;
using NetworkCommsDotNet.Tools;

namespace ExamplesChat.iOS
{
	public partial class ChatWindow : UIViewController
    {
        public static ChatAppiOS ChatApplication { get; set; }

        public ChatWindow (IntPtr handle) : base (handle)
		{
            
		}

        /// <summary>
        /// On load initialise the example
        /// </summary>
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            //Subscribe to the keyboard events
            NSNotificationCenter.DefaultCenter.AddObserver(UIKeyboard.DidHideNotification, HandleKeyboardDidHide);
            NSNotificationCenter.DefaultCenter.AddObserver(UIKeyboard.DidShowNotification, HandleKeyboardDidShow);

            //Remove the keyboard if the screen is tapped
            var tap = new UITapGestureRecognizer();
            tap.AddTarget(() =>
            {
                this.View.EndEditing(true);
            });
            this.View.AddGestureRecognizer(tap);

            //Create the chat application instance
            ChatApplication = new ChatAppiOS(ChatHistory, MessageBox);

            //Uncomment this line to enable logging
            //EnableLogging();

            //Set the default serializer to Protobuf
            ChatApplication.Serializer = DPSManager.GetDataSerializer<NetworkCommsDotNet.DPSBase.ProtobufSerializer>();

			//Get the initial size of the chat view
			ChatApplication.OriginalViewSize = ChatView.Frame;

            //Print out the application usage instructions
            ChatApplication.PrintUsageInstructions();

            //Initialise comms to add the necessary packet handlers
            ChatApplication.RefreshNetworkCommsConfiguration();
        }

        /// <summary>
        /// Enable logging, useful for debugging applications.
        /// </summary>
        private void EnableLogging()
        {
            //We will create the log file in the local documents directory
            string logFileName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "NetworkCommsLog.txt");
            ChatApplication.AppendLineToChatHistory("Logging enabled to " + logFileName);

            ILogger logger = new LiteLogger(LiteLogger.LogMode.LogFileOnly, logFileName);
            NetworkComms.EnableLogging(logger);
        }

        #region Event Handlers
        /// <summary>
        /// Sends the message when send button is clicked
        /// </summary>
        /// <param name="sender"></param>
        partial void SendButtonClick(NSObject sender)
        {
            ChatApplication.SendMessage(MessageBox.Text);
        }

        /// <summary>
        /// Resize the view to take into account the keyboard position
        /// </summary>
        /// <param name="notification"></param>
        void HandleKeyboardDidShow(NSNotification notification)
        {
            ChatApplication.ClearInputLine();

            NSObject value = notification.UserInfo[UIKeyboard.FrameEndUserInfoKey];
            CGRect keyboardFrame = ((NSValue)value).RectangleFValue;

            ChatView.Frame = new CGRect(ChatView.Frame.X, ChatView.Frame.Y, ChatView.Frame.Width, ChatView.Frame.Height - keyboardFrame.Height);
            CGPoint bottomOffset = new CGPoint(0, ChatHistory.ContentSize.Height - ChatHistory.Bounds.Size.Height);
            ChatHistory.SetContentOffset(bottomOffset, true);
        }

        /// <summary>
        /// Resize the view once the keyboard has been minimised
        /// </summary>
        /// <param name="notification"></param>
        private void HandleKeyboardDidHide(NSNotification notification)
        {
            //Set back to original size
            ChatView.Frame = ChatApplication.OriginalViewSize;
        }
        #endregion
    }
}
